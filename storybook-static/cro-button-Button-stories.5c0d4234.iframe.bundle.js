(self.webpackChunk_virginmediao2_cro_components=self.webpackChunk_virginmediao2_cro_components||[]).push([[485],{"./stories/cro-button/Button.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Secondary:()=>Secondary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./stories/cro-button/Button.js");const __WEBPACK_DEFAULT_EXPORT__={title:"CRO/Button",tags:["autodocs"],argTypes:{label:{control:"text"},disabled:{control:"boolean"},type:{control:"text"}}},Template=({label,disabled,type})=>{const croButton=document.createElement("cro-button");return label&&croButton.setAttribute("label",label),disabled&&croButton.setAttribute("disabled",""),type&&croButton.setAttribute("type",type),croButton},Default=Template.bind({});Default.args={label:"Click Me",disabled:!1,type:"primary"};const Secondary=Template.bind({});Secondary.args={label:"Click Me Please",disabled:!1,type:"secondary"};const __namedExportsOrder=["Default","Secondary"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"({\n  label,\n  disabled,\n  type\n}) => {\n  const croButton = document.createElement('cro-button');\n  if (label) croButton.setAttribute('label', label);\n  if (disabled) croButton.setAttribute('disabled', '');\n  if (type) croButton.setAttribute('type', type);\n  return croButton;\n}",...Default.parameters?.docs?.source}}},Secondary.parameters={...Secondary.parameters,docs:{...Secondary.parameters?.docs,source:{originalSource:"({\n  label,\n  disabled,\n  type\n}) => {\n  const croButton = document.createElement('cro-button');\n  if (label) croButton.setAttribute('label', label);\n  if (disabled) croButton.setAttribute('disabled', '');\n  if (type) croButton.setAttribute('type', type);\n  return croButton;\n}",...Secondary.parameters?.docs?.source}}}},"./stories/cro-button/Button.js":()=>{class Button extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=`\n            <button class='${this.getAttribute("type")||""}'>\n                <span>${this.getAttribute("label")||"Click Me"}</span>\n            </button>\n        `;const style=document.createElement("style");style.textContent='\n            button {\n                border: 2px solid #5F2878;\n                background-color: #5F2878;\n                color: white;\n                //font-family: VMCircularChatPTT,Arial,Helvetica,"sans-serif";\n                font-family: "VMMomentum", Arial, Helvetica, sans-serif;\n                height: 48px;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                border-radius: 32px;\n                min-width: 128px;\n                width: 100%;\n                max-width: 250px;\n                cursor: pointer;\n            }\n            button.secondary {\n                background-color: white;\n                color: #5F2878;\n            }\n        ',this.shadowRoot.append(style),this.shadowRoot.querySelector("button").addEventListener("click",(()=>this.handleClick()))}handleClick(){console.log("Button clicked!"),this.dispatchEvent(new Event("button-click",{bubbles:!0,composed:!0}))}static get observedAttributes(){return["label","disabled","type"]}attributeChangedCallback(name,oldValue,newValue){const button=this.shadowRoot.querySelector("button");"label"===name&&button&&(button.textContent=newValue),"type"===name&&(button.classList=newValue)}}customElements.define("cro-button",Button)}}]);